{# Copyright (c) Meta Platforms, Inc. and affiliates. #}
<h1>Banks</h1>
<p class="text-secondary">Banks are like folders. You can do the following on this page:</p>
<ul class="text-secondary">
    <li>Create new banks</li>
    <li>Add content: Add content to each bank</li>
    <li>Search by content: Find banks that contain a certain piece of content</li>
</ul>
{% include 'components/banks/actions_bar.html.j2' %}

<div class="row row-cols-1 row-cols-md-4 g-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Bank Name</th>
                <th scope="col">Matching Enabled Ratio</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for bank in bankList %}
            <tr id="bank_item_{{bank['name']}}">
                <th scope="row" style="background-color: transparent;">{{ loop.index }}</th>
                <td style="background-color: transparent;">{{ bank['name'] }}</td>
                <td style="background-color: transparent;">{{ bank['matching_enabled_ratio'] }}</td>
                <td style="background-color: transparent;">
                    {% with bank_title=bank['name'] %}
                    {% include 'components/banks/add_to_bank_form.html.j2' %}
                    {% endwith %}
                </td>
            </tr>
            {% endfor %}
        </tbody>

    </table>
</div>
<script>
    const banksData = [
        {% for bank in bankList %}
    {
        name: "{{ bank.name|e }}"
    } {% if not loop.last %}, {% endif %}
    {% endfor %}
    ];

    banksData.forEach(function (bank) {
        const bankTitle = bank.name;
        const addContentModal = document.getElementById("add-content-modal-" + bankTitle);
        const addContentToBankForm = document.getElementById("add_content_to_bank_" + bankTitle);
        const formContent = addContentToBankForm.innerHTML;
        
        // Get toggle elements for this specific bank
        const fileSection = document.getElementById("add_file_section_" + bankTitle);
        const hashSection = document.getElementById("add_hash_section_" + bankTitle);
        const inputFileRadio = document.getElementById("add_input_file_" + bankTitle);
        const inputHashRadio = document.getElementById("add_input_hash_" + bankTitle);
        const fileInput = document.getElementById("bank-add-file-input-" + bankTitle);
        const hashInput = document.getElementById("bank-add-hash-input-" + bankTitle);
        
        // Set up toggle event listeners once when page loads
        function toggleInputMode() {
            if (inputFileRadio && inputFileRadio.checked) {
                // Show file section, hide hash section
                if (fileSection) fileSection.classList.remove('d-none');
                if (hashSection) hashSection.classList.add('d-none');
                if (fileInput) fileInput.required = true;
                if (hashInput) hashInput.required = false;
            } else if (inputHashRadio && inputHashRadio.checked) {
                // Show hash section, hide file section
                if (fileSection) fileSection.classList.add('d-none');
                if (hashSection) hashSection.classList.remove('d-none');
                if (fileInput) fileInput.required = false;
                if (hashInput) hashInput.required = true;
            }
        }
        
        // Add event listeners for radio buttons
        if (inputFileRadio) {
            inputFileRadio.addEventListener("change", toggleInputMode);
        }
        
        if (inputHashRadio) {
            inputHashRadio.addEventListener("change", toggleInputMode);
        }
        
        // Reset to file mode when modal is shown
        addContentModal.addEventListener('shown.bs.modal', function () {
            if (inputFileRadio) inputFileRadio.checked = true;
            toggleInputMode();
        });
        
        // Add file type listener for file upload mode
        const contentTypeSelect = document.getElementById('bank-add-content-type-' + bankTitle);
        if (contentTypeSelect) {
            contentTypeSelect.addEventListener('change', (e) => {
                // Special case selections for our well known types
                if (e.target.value === 'photo') {
                    fileInput.accept = "image/*";
                } else if (e.target.value === 'video') {
                    fileInput.accept = "video/*";
                } else {
                    fileInput.accept = "file";
                }
            });
        }
        
        addContentToBankForm.addEventListener("submit", (event) => {
            event.preventDefault();
            
            const inputType = document.querySelector(`input[name="add_input_type_${bankTitle}"]:checked`).value;
            
            if (inputType === "file") {
                // File upload mode
                const formData = new FormData(event.target);
                formData.append(event.target.content_type.value, event.target.file.files[0]);
                formData.delete("file");

                fetch(`/c/bank/${bankTitle}/content`, {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        renderAddBankResult(data);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            } else {
                // Hash input mode
                const hash = event.target.hash.value;
                const signal_type = event.target.signal_type.value;
                
                const params = new URLSearchParams({
                    hash: hash,
                    signal_type: signal_type,
                    bank_name: bankTitle
                });

                fetch('/ui/add_hash_to_bank', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: params
                })
                    .then(response => response.json())
                    .then(data => {
                        renderAddBankResult(data);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        });

        // reset modal innerHTML on close
        addContentModal.addEventListener('hidden.bs.modal', function () {
            addContentToBankForm.innerHTML = formContent;
        });

        const renderAddBankResult = (result) => {
            // Render hashes table
            const hashTable = HashTable(result);

            // render on HTML
            addContentToBankForm.innerHTML = hashTable;
        }

        const HashTable = (result) => {
            return `
<div class="modal-header">
    <h3 class="text-success">Success!</h3>
    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
</div>
<div class="modal-body">
    <h4>Added Hashes:</h4>
    <p>Content ID: ${result.id}</p>
    <h4>Hash Values:</h4>
    <table class="table table-hover"=>
        <thead>
            <tr>
                <th>Key</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            ${Object.entries(result.signals).map(([key, value]) => `
            <tr>
                <td>${key}</td>
                <td style="overflow: scroll; max-width: 200px; white-space: no-wrap;">${value}</td>
            </tr>
            `).join('')}
        </tbody>

    </table>
</div>
`;
        }

    });

</script>